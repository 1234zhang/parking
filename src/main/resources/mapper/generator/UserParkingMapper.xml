<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.netplus.catpark.dao.generator.UserParkingMapper">
  <resultMap id="BaseResultMap" type="com.netplus.catpark.domain.po.UserParking">
    <constructor>
      <idArg column="id" javaType="java.lang.Long" jdbcType="BIGINT" />
      <arg column="user_id" javaType="java.lang.Long" jdbcType="BIGINT" />
      <arg column="address" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="latitude" javaType="java.lang.Double" jdbcType="DOUBLE" />
      <arg column="longitude" javaType="java.lang.Double" jdbcType="DOUBLE" />
      <arg column="position_geo_hash" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="payment" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="gmt_create" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="gmt_update" javaType="java.util.Date" jdbcType="DATE" />
      <arg column="deleted" javaType="java.lang.Boolean" jdbcType="BIT" />
      <arg column="begin_book_time" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="end_book_time" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="parking_type" javaType="java.lang.Byte" jdbcType="TINYINT" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, user_id, address, latitude, longitude, position_geo_hash, payment, gmt_create, 
    gmt_update, deleted, begin_book_time, end_book_time, parking_type
  </sql>
  <select id="selectByExample" parameterType="com.netplus.catpark.domain.po.UserParkingExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'false' as QUERYID,
    <include refid="Base_Column_List" />
    from user_parking
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from user_parking
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from user_parking
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.netplus.catpark.domain.po.UserParking">
    insert into user_parking (id, user_id, address, 
      latitude, longitude, position_geo_hash, 
      payment, gmt_create, gmt_update, 
      deleted, begin_book_time, end_book_time, 
      parking_type)
    values (#{id,jdbcType=BIGINT}, #{userId,jdbcType=BIGINT}, #{address,jdbcType=VARCHAR}, 
      #{latitude,jdbcType=DOUBLE}, #{longitude,jdbcType=DOUBLE}, #{positionGeoHash,jdbcType=VARCHAR}, 
      #{payment,jdbcType=INTEGER}, #{gmtCreate,jdbcType=TIMESTAMP}, #{gmtUpdate,jdbcType=DATE}, 
      #{deleted,jdbcType=BIT}, #{beginBookTime,jdbcType=INTEGER}, #{endBookTime,jdbcType=INTEGER}, 
      #{parkingType,jdbcType=TINYINT})
  </insert>
  <insert id="insertSelective" parameterType="com.netplus.catpark.domain.po.UserParking">
    insert into user_parking
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="address != null">
        address,
      </if>
      <if test="latitude != null">
        latitude,
      </if>
      <if test="longitude != null">
        longitude,
      </if>
      <if test="positionGeoHash != null">
        position_geo_hash,
      </if>
      <if test="payment != null">
        payment,
      </if>
      <if test="gmtCreate != null">
        gmt_create,
      </if>
      <if test="gmtUpdate != null">
        gmt_update,
      </if>
      <if test="deleted != null">
        deleted,
      </if>
      <if test="beginBookTime != null">
        begin_book_time,
      </if>
      <if test="endBookTime != null">
        end_book_time,
      </if>
      <if test="parkingType != null">
        parking_type,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="address != null">
        #{address,jdbcType=VARCHAR},
      </if>
      <if test="latitude != null">
        #{latitude,jdbcType=DOUBLE},
      </if>
      <if test="longitude != null">
        #{longitude,jdbcType=DOUBLE},
      </if>
      <if test="positionGeoHash != null">
        #{positionGeoHash,jdbcType=VARCHAR},
      </if>
      <if test="payment != null">
        #{payment,jdbcType=INTEGER},
      </if>
      <if test="gmtCreate != null">
        #{gmtCreate,jdbcType=TIMESTAMP},
      </if>
      <if test="gmtUpdate != null">
        #{gmtUpdate,jdbcType=DATE},
      </if>
      <if test="deleted != null">
        #{deleted,jdbcType=BIT},
      </if>
      <if test="beginBookTime != null">
        #{beginBookTime,jdbcType=INTEGER},
      </if>
      <if test="endBookTime != null">
        #{endBookTime,jdbcType=INTEGER},
      </if>
      <if test="parkingType != null">
        #{parkingType,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
  <update id="updateByExampleSelective" parameterType="map">
    update user_parking
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=BIGINT},
      </if>
      <if test="record.address != null">
        address = #{record.address,jdbcType=VARCHAR},
      </if>
      <if test="record.latitude != null">
        latitude = #{record.latitude,jdbcType=DOUBLE},
      </if>
      <if test="record.longitude != null">
        longitude = #{record.longitude,jdbcType=DOUBLE},
      </if>
      <if test="record.positionGeoHash != null">
        position_geo_hash = #{record.positionGeoHash,jdbcType=VARCHAR},
      </if>
      <if test="record.payment != null">
        payment = #{record.payment,jdbcType=INTEGER},
      </if>
      <if test="record.gmtCreate != null">
        gmt_create = #{record.gmtCreate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.gmtUpdate != null">
        gmt_update = #{record.gmtUpdate,jdbcType=DATE},
      </if>
      <if test="record.deleted != null">
        deleted = #{record.deleted,jdbcType=BIT},
      </if>
      <if test="record.beginBookTime != null">
        begin_book_time = #{record.beginBookTime,jdbcType=INTEGER},
      </if>
      <if test="record.endBookTime != null">
        end_book_time = #{record.endBookTime,jdbcType=INTEGER},
      </if>
      <if test="record.parkingType != null">
        parking_type = #{record.parkingType,jdbcType=TINYINT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update user_parking
    set id = #{record.id,jdbcType=BIGINT},
      user_id = #{record.userId,jdbcType=BIGINT},
      address = #{record.address,jdbcType=VARCHAR},
      latitude = #{record.latitude,jdbcType=DOUBLE},
      longitude = #{record.longitude,jdbcType=DOUBLE},
      position_geo_hash = #{record.positionGeoHash,jdbcType=VARCHAR},
      payment = #{record.payment,jdbcType=INTEGER},
      gmt_create = #{record.gmtCreate,jdbcType=TIMESTAMP},
      gmt_update = #{record.gmtUpdate,jdbcType=DATE},
      deleted = #{record.deleted,jdbcType=BIT},
      begin_book_time = #{record.beginBookTime,jdbcType=INTEGER},
      end_book_time = #{record.endBookTime,jdbcType=INTEGER},
      parking_type = #{record.parkingType,jdbcType=TINYINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.netplus.catpark.domain.po.UserParking">
    update user_parking
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="address != null">
        address = #{address,jdbcType=VARCHAR},
      </if>
      <if test="latitude != null">
        latitude = #{latitude,jdbcType=DOUBLE},
      </if>
      <if test="longitude != null">
        longitude = #{longitude,jdbcType=DOUBLE},
      </if>
      <if test="positionGeoHash != null">
        position_geo_hash = #{positionGeoHash,jdbcType=VARCHAR},
      </if>
      <if test="payment != null">
        payment = #{payment,jdbcType=INTEGER},
      </if>
      <if test="gmtCreate != null">
        gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
      </if>
      <if test="gmtUpdate != null">
        gmt_update = #{gmtUpdate,jdbcType=DATE},
      </if>
      <if test="deleted != null">
        deleted = #{deleted,jdbcType=BIT},
      </if>
      <if test="beginBookTime != null">
        begin_book_time = #{beginBookTime,jdbcType=INTEGER},
      </if>
      <if test="endBookTime != null">
        end_book_time = #{endBookTime,jdbcType=INTEGER},
      </if>
      <if test="parkingType != null">
        parking_type = #{parkingType,jdbcType=TINYINT},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.netplus.catpark.domain.po.UserParking">
    update user_parking
    set user_id = #{userId,jdbcType=BIGINT},
      address = #{address,jdbcType=VARCHAR},
      latitude = #{latitude,jdbcType=DOUBLE},
      longitude = #{longitude,jdbcType=DOUBLE},
      position_geo_hash = #{positionGeoHash,jdbcType=VARCHAR},
      payment = #{payment,jdbcType=INTEGER},
      gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
      gmt_update = #{gmtUpdate,jdbcType=DATE},
      deleted = #{deleted,jdbcType=BIT},
      begin_book_time = #{beginBookTime,jdbcType=INTEGER},
      end_book_time = #{endBookTime,jdbcType=INTEGER},
      parking_type = #{parkingType,jdbcType=TINYINT}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>